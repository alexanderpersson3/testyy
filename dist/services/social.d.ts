import type { ObjectId } from '../types/index.js';
import { Db } from 'mongodb';
import type { UserFollowDocument, StoryDocument, StoryCommentDocument, StoryReactionDocument, StoryShareDocument, UserBlockDocument, ContentReportDocument } from '../types/index.js';
import { CreateStoryInput, CreateStoryCommentInput, CreateStoryReactionInput, CreateStoryShareInput, CreateUserBlockInput, CreateContentReportInput, CreateUserFollowInput, UserWithoutSensitiveData } from '../types/social.js';
import type { UserProfileDocument } from '../types/index.js';
import type { WithId } from '../types/index.js';
export declare class SocialService {
    private db;
    private storiesCollection;
    private followsCollection;
    private profilesCollection;
    private usersCollection;
    private commentsCollection;
    private reactionsCollection;
    private blocksCollection;
    private reportsCollection;
    private sharesCollection;
    constructor(db: Db);
    private initializeCollections;
    getProfile(userId: ObjectId): Promise<UserProfileDocument | null>;
    updateProfile(userId: ObjectId, updates: Partial<UserProfileDocument>): Promise<boolean>;
    addHighlight(userId: ObjectId, highlight: Omit<UserProfileDocument['highlights'][0], '_id' | 'createdAt'>): Promise<ObjectId | null>;
    removeHighlight(userId: ObjectId, highlightId: ObjectId): Promise<boolean>;
    followUser(followerId: ObjectId, followedId: ObjectId): Promise<boolean>;
    unfollowUser(followerId: ObjectId, followedId: ObjectId): Promise<boolean>;
    getFollowers(userId: ObjectId): Promise<WithId<UserFollowDocument>[]>;
    getFollowing(userId: ObjectId): Promise<WithId<UserFollowDocument>[]>;
    createStory(input: CreateStoryInput): Promise<ObjectId | null>;
    createStoryComment(input: CreateStoryCommentInput): Promise<ObjectId | null>;
    createStoryReaction(input: CreateStoryReactionInput): Promise<ObjectId | null>;
    createStoryShare(input: CreateStoryShareInput): Promise<ObjectId | null>;
    createUserBlock(input: CreateUserBlockInput): Promise<ObjectId | null>;
    createContentReport(input: CreateContentReportInput): Promise<ObjectId | null>;
    createUserFollow(input: CreateUserFollowInput): Promise<ObjectId | null>;
    getStories(userId: ObjectId): Promise<WithId<StoryDocument>[]>;
    viewStory(storyId: ObjectId): Promise<boolean>;
    getExploreFeed(userId: ObjectId, page?: number, limit?: number): Promise<StoryDocument[]>;
    getPopularUsers(limit?: number): Promise<UserProfileDocument[]>;
    updateUserStats(userId: ObjectId, updates: Partial<UserProfileDocument['stats']>): Promise<boolean>;
    addComment(storyId: ObjectId, userId: ObjectId, content: string): Promise<ObjectId | null>;
    getStoryComments(storyId: ObjectId): Promise<WithId<StoryCommentDocument>[]>;
    addReaction(storyId: ObjectId, userId: ObjectId, type: StoryReactionDocument['type']): Promise<boolean>;
    removeReaction(storyId: ObjectId, userId: ObjectId): Promise<boolean>;
    getStoryReactions(storyId: ObjectId): Promise<WithId<StoryReactionDocument>[]>;
    shareStory(storyId: ObjectId, userId: ObjectId, sharedToId?: ObjectId, message?: string): Promise<ObjectId | null>;
    getStoryShares(storyId: ObjectId): Promise<WithId<StoryShareDocument>[]>;
    blockUser(blockerId: ObjectId, blockedId: ObjectId, reason?: string): Promise<boolean>;
    unblockUser(blockerId: ObjectId, blockedId: ObjectId): Promise<boolean>;
    getUserBlocks(userId: ObjectId): Promise<WithId<UserBlockDocument>[]>;
    reportContent(reporterId: ObjectId, contentType: ContentReportDocument['contentType'], contentId: ObjectId, reason: ContentReportDocument['reason'], description?: string): Promise<ObjectId | null>;
    updateReportStatus(reportId: ObjectId, status: ContentReportDocument['status']): Promise<boolean>;
    updateProfileCustomization(userId: ObjectId, customization: Partial<UserProfileDocument['customization']>): Promise<boolean>;
    getProfileCustomization(userId: ObjectId): Promise<UserProfileDocument['customization'] | null>;
    getContentReports(contentId: ObjectId): Promise<WithId<ContentReportDocument>[]>;
    isFollowing(followerId: ObjectId, followedId: ObjectId): Promise<boolean>;
    searchStories(query: string, page?: number, limit?: number): Promise<WithId<StoryDocument>[]>;
    getStoriesByDateRange(startDate: Date, endDate: Date, page?: number, limit?: number): Promise<WithId<StoryDocument>[]>;
    isUserBlocked(blockerId: ObjectId, blockedId: ObjectId): Promise<boolean>;
    hasUserReported(contentId: ObjectId, reporterId: ObjectId): Promise<boolean>;
    getFollowingUsers(userId: ObjectId): Promise<UserWithoutSensitiveData[]>;
    getFollowerUsers(userId: ObjectId): Promise<UserWithoutSensitiveData[]>;
    getFollowingCount(userId: ObjectId): Promise<number>;
    getFollowersCount(userId: ObjectId): Promise<number>;
    getStoryCommentsCount(storyId: ObjectId): Promise<number>;
    getStoryReactionsCount(storyId: ObjectId): Promise<number>;
    getStorySharesCount(storyId: ObjectId): Promise<number>;
    getUserBlocksCount(userId: ObjectId): Promise<number>;
    getContentReportsCount(contentId: ObjectId): Promise<number>;
}
